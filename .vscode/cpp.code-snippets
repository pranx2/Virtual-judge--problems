{
	// Place your C++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

"main.cpp": {
		"scope": "",
		"prefix": "cpp",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"int main(){",
			"$0",
				"return 0;",
			"}",
		],
		"description": "C++ main file with headerfile."
	},
"CP.cpp": {
		"scope": "",
		"prefix": "CPC",
		"body": [
			"#include <bits/stdc++.h>",

			"using namespace std;",
			
			"template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; }",
			"template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; }",
			"void dbg_out() { cerr << endl; }",
			"template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
			"#ifdef LOCAL",
			//uncheck this code below->
			"#define dbg(...) cerr << ''('' << #__VA_ARGS__ << ''):'', dbg_out(__VA_ARGS__)",
			"#else",
			"#define dbg(...)",
			"#endif",
			
			"#define ar array",
			"#define ll long long",
			"#define ld long double",
			"#define sza(x) ((int)x.size())",
			"#define all(a) (a).begin(), (a).end()",
			
			"const int MAX_N = 1e5 + 5;",
			"const ll MOD = 1e9 + 7;",
			"const ll INF = 1e9;",
			"const ld EPS = 1e-9;",
			
			
			
			"void solve() {",
				
			"}",
			
			"int main() {",
				"ios_base::sync_with_stdio(0);",
				"cin.tie(0); cout.tie(0);",
				"int tc = 1;",
				"// cin >> tc;",
				"for (int t = 1; t <= tc; t++) {",
					"// cout << ''Case #'', << t << '': '';",
					"solve();",
				"}",
			"}",
		],
		"description": "C++ main file with headerfile."
	}
}